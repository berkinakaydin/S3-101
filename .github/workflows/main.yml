# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      
      - name: Setup Node.js environment
        uses: actions/setup-node@v2.1.5
        with:
          node-version: '14'

      #Install Yarn (for testing act in local with minimal os)
      - name: Install yarn
        run: npm install -g yarn

      - name: Install dependencies
        run: yarn
        
      # Run tests
      - name: Test
        run: echo test will be implemented
        
      # Run audit to check deps
      - name: Check Dependencies
        run: yarn audit || true

      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        run: |
          echo Add other actions to build,
          echo test, and deploy your project.

  #Push to Digital Ocean private Registry
  pushToDockerRegistry:
    # Ensure test job passes before pushing image.
    needs: build

    runs-on: ubuntu-latest
    if: github.event_name == 'push' 
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      -
        name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: berkin768/affinidi-study:latest

  #Run the container in droplet
  deploy:
    needs: pushToDockerRegistry
    runs-on: ubuntu-latest
    if: github.event_name == 'push' 
    steps:
      - uses: actions/checkout@v2

      - name: Executing remote command
        uses: appleboy/ssh-action@master
        env: 
          AWS_ACCESS_KEY_ID: ${{secrets.AWS_ACCESS_KEY_ID}}
          AWS_SECRET_ACCESS_KEY: ${{secrets.AWS_SECRET_ACCESS_KEY}}
          BUCKET_NAME: ${{secrets.BUCKET_NAME}}
          NODE_ENV: production
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          port: ${{ secrets.PORT }}
          password: ${{ secrets.PASSWORD }}
          envs: AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY, BUCKET_NAME, NODE_ENV
          script: |
            docker stop affinidi
            docker container rm affinidi -f
            docker pull berkin768/affinidi-study:latest
            docker run --name affinidi --network=host -d -p 8080:8080 \
            -e AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID \
            -e AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY \
            -e BUCKET_NAME=$BUCKET_NAME \
            -e NODE_ENV=$NODE_ENV \
            berkin768/affinidi-study:latest 
