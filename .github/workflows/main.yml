# This is a basic workflow to help you get started with Actions

name: CI

env:
  # TODO: Change variable to your image's name.
  IMAGE_NAME: affinidi-case-study-project
  REGISTRY_NAME: berkin-test


# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      
      - name: Setup Node.js environment
        uses: actions/setup-node@v2.1.5
        with:
          node-version: '14'

      - name: Install dependencies
        run: yarn
        
      # Run tests
      - name: Test
        run: echo test will be implemented
        
      # Run audit to check deps
      - name: Check Dependencies
        run: yarn audit || true

      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        run: |
          echo Add other actions to build,
          echo test, and deploy your project.

  #Push to Digital Ocean private Registry
  pushToDORegistry:
    # Ensure test job passes before pushing image.
    needs: build

    runs-on: ubuntu-latest
    if: github.event_name == 'push' 
    steps:
      - uses: actions/checkout@v2
      - name: Build image
        run: docker build . --file Dockerfile --tag $IMAGE_NAME

      - name: Install doctl                 # install the doctl on the runner
        uses: digitalocean/action-doctl@v2
        with:
            token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: push image to digitalocean
        run: |
          doctl registry login
          docker tag $IMAGE_NAME registry.digitalocean.com/$REGISTRY_NAME/$IMAGE_NAME
          docker push registry.digitalocean.com/$REGISTRY_NAME/$IMAGE_NAME

  #Run the container in droplet
  deploy:
    needs: pushToDORegistry
    runs-on: ubuntu-latest
    if: github.event_name == 'push' 
    steps:
        - uses: actions/checkout@v2
        - name: Executing remote  command
          uses: appleboy/ssh-action@master
          with:
            host: ${{ secrets.HOST }}
            USERNAME: ${{ secrets.USERNAME }}
            PORT: ${{ secrets.PORT }}
            password: ${{ secrets.PASSWORD }}
            script: |
                <WHAT IS COMMAND NEEDED TO PULL IMAGE FROM DIGITAL OCEAN REGISTRY and RUN THE DOCKER IMAGE>
